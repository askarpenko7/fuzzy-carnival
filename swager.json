{ "openapi": "3.0.1", "info": { "title": "IpiQualityControlWebApi", "version": "1.0" }, "paths": { "/api/v1/actions": { "get": { "tags": [ "Action" ], "summary": "Endpoint to get actions.", "parameters": [ { "name": "idWorkplace", "in": "query", "description": "Optional ID of the workplace to filter actions.", "schema": { "type": "integer", "format": "int64" } } ], "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ActionWithControlPlansInfoResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ActionWithControlPlansInfoResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ActionWithControlPlansInfoResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } }, "post": { "tags": [ "Action" ], "summary": "Register new action.", "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ActionCreateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ActionCreateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/ActionCreateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ActionResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ActionResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ActionResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/actions/{idAction}": { "put": { "tags": [ "Action" ], "summary": "Update existing action.", "parameters": [ { "name": "idAction", "in": "path", "required": true, "schema": { "minimum": 1, "type": "integer", "format": "int64" } } ], "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ActionUpdateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ActionUpdateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/ActionUpdateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ActionResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ActionResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ActionResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/causers": { "get": { "tags": [ "Causer" ], "summary": "Endpoint to get causers.", "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/CauserResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/CauserResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/CauserResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } }, "post": { "tags": [ "Causer" ], "summary": "Endpoint to create new causer.", "requestBody": { "description": "Request to register new causer.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CauserCreateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/CauserCreateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/CauserCreateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/CauserResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/CauserResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/CauserResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/causers/{idCauser}": { "put": { "tags": [ "Causer" ], "summary": "Endpoint to update existing causer.", "parameters": [ { "name": "idCauser", "in": "path", "description": "ID of the causer to update.", "required": true, "schema": { "minimum": 1, "type": "integer", "format": "int64" } } ], "requestBody": { "description": "Request to update existing causer.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CauserUpdateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/CauserUpdateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/CauserUpdateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/CauserResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/CauserResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/CauserResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/checks": { "get": { "tags": [ "Check" ], "summary": "Endpoint to get checks.", "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/CheckResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/CheckResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/CheckResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } }, "post": { "tags": [ "Check" ], "summary": "Endpoint to create new check.", "requestBody": { "description": "Request to create new check.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CheckCreateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/CheckCreateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/CheckCreateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/CheckResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/CheckResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/CheckResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/checks/{idCheck}": { "put": { "tags": [ "Check" ], "summary": "Endpoint to update existing check.", "parameters": [ { "name": "idCheck", "in": "path", "description": "ID of the check to update.", "required": true, "schema": { "minimum": 1, "type": "integer", "format": "int64" } } ], "requestBody": { "description": "Request to update existing check.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CheckUpdateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/CheckUpdateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/CheckUpdateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/CheckResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/CheckResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/CheckResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/check-lists": { "get": { "tags": [ "CheckList" ], "summary": "Endpoint to get check lists.", "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/CheckListResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/CheckListResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/CheckListResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } }, "post": { "tags": [ "CheckList" ], "summary": "Endpoint to register new check list.", "requestBody": { "description": "Request to create new check list.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CheckListCreateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/CheckListCreateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/CheckListCreateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/CheckListResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/CheckListResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/CheckListResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/check-lists/{idCheckList}": { "put": { "tags": [ "CheckList" ], "summary": "Endpoint to update existing check list.", "parameters": [ { "name": "idCheckList", "in": "path", "description": "ID of the existing check list to update.", "required": true, "schema": { "type": "integer", "format": "int64" } } ], "requestBody": { "description": "Request to update existing check list.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CheckListUpdateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/CheckListUpdateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/CheckListUpdateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/CheckListResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/CheckListResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/CheckListResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } }, "delete": { "tags": [ "CheckList" ], "summary": "Endpoint to delete existing check list.", "parameters": [ { "name": "idCheckList", "in": "path", "description": "ID of the existing check list to delete.", "required": true, "schema": { "type": "integer", "format": "int64" } } ], "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/SimpleResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/SimpleResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/SimpleResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/connections-reason-action": { "get": { "tags": [ "ConnectionReasonAction" ], "summary": "Endpoint to get connections between reasons and actions.", "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ConnectionReasonActionResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ConnectionReasonActionResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ConnectionReasonActionResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/connections-workplace-action": { "get": { "tags": [ "ConnectionWorkplaceAction" ], "summary": "Endpoint to get connections between workplaces and actions.", "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ConnectionWorkplaceActionResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ConnectionWorkplaceActionResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ConnectionWorkplaceActionResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/control-plans": { "get": { "tags": [ "ControlPlan" ], "summary": "Endpoint to get control plans.", "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ControlPlanResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ControlPlanResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ControlPlanResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } }, "post": { "tags": [ "ControlPlan" ], "summary": "Endpoint to register new control plan.", "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ControlPlanCreateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ControlPlanCreateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/ControlPlanCreateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ControlPlanResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ControlPlanResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ControlPlanResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/control-plans/{idCp}": { "put": { "tags": [ "ControlPlan" ], "summary": "Endpoint to update existing control plan.", "parameters": [ { "name": "idCp", "in": "path", "required": true, "schema": { "minimum": 1, "type": "integer", "format": "int64" } } ], "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ControlPlanUpdateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ControlPlanUpdateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/ControlPlanUpdateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ControlPlanResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ControlPlanResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ControlPlanResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/details/scan": { "post": { "tags": [ "Detail" ], "summary": "Endpoint to scan detail and return related information.", "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DetailScanRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/DetailScanRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/DetailScanRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/DetailWithPartElementInfoResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/DetailWithPartElementInfoResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/DetailWithPartElementInfoResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/factory-names": { "get": { "tags": [ "Factory" ], "summary": "Endpoint to get dictionary with factory names.", "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/FactoryNameResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/FactoryNameResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/FactoryNameResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/factories": { "get": { "tags": [ "Factory" ], "summary": "Endpoint to get all registered factories.", "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/FactoryResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/FactoryResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/FactoryResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } }, "post": { "tags": [ "Factory" ], "summary": "Endpoint to register new factory (association between factory name and production type).", "requestBody": { "description": "Request to register new factory.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FactoryCreateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/FactoryCreateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/FactoryCreateRequestDto" } } } }, "responses": { "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/import/actions": { "post": { "tags": [ "Import" ], "summary": "Upload actions from *.xlsx file.", "parameters": [ { "name": "idProductionType", "in": "query", "description": "ID of the record from the production type dictionary.", "required": true, "schema": { "type": "integer", "format": "int64" } } ], "requestBody": { "content": { "multipart/form-data": { "schema": { "type": "object", "properties": { "file": { "type": "string", "description": "File content.", "format": "binary" } } }, "encoding": { "file": { "style": "form" } } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/SimpleResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/SimpleResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/SimpleResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } }, "409": { "description": "Conflict", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/import/causers": { "post": { "tags": [ "Import" ], "summary": "Upload causers from *.xlsx file.", "parameters": [ { "name": "idProductionType", "in": "query", "description": "ID of the record from the production type dictionary.", "required": true, "schema": { "type": "integer", "format": "int64" } } ], "requestBody": { "content": { "multipart/form-data": { "schema": { "type": "object", "properties": { "file": { "type": "string", "description": "File content.", "format": "binary" } } }, "encoding": { "file": { "style": "form" } } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/SimpleResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/SimpleResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/SimpleResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } }, "409": { "description": "Conflict", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/import/checks": { "post": { "tags": [ "Import" ], "summary": "Upload control checks from *.xlsx file.", "requestBody": { "content": { "multipart/form-data": { "schema": { "type": "object", "properties": { "file": { "type": "string", "description": "File content.", "format": "binary" } } }, "encoding": { "file": { "style": "form" } } } } }, "responses": { "200": { "description": "Success" }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } }, "409": { "description": "Conflict", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/import/reason-details": { "post": { "tags": [ "Import" ], "summary": "Upload reason details from *.xlsx file.", "parameters": [ { "name": "idProductionType", "in": "query", "description": "ID of the record from the production type dictionary.", "required": true, "schema": { "type": "integer", "format": "int64" } }, { "name": "idControlPlan", "in": "query", "description": "ID of the control plan to which connect imported reason details.", "required": true, "schema": { "type": "integer", "format": "int64" } } ], "requestBody": { "content": { "multipart/form-data": { "schema": { "type": "object", "properties": { "file": { "type": "string", "description": "File content.", "format": "binary" } } }, "encoding": { "file": { "style": "form" } } } } }, "responses": { "200": { "description": "Success" }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } }, "409": { "description": "Conflict", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/import/users": { "post": { "tags": [ "Import" ], "summary": "Upload users from *.xlsx file.", "parameters": [ { "name": "idFactory", "in": "query", "description": "Optional ID of the factory where this user works.", "schema": { "type": "integer", "format": "int64" } } ], "requestBody": { "content": { "multipart/form-data": { "schema": { "type": "object", "properties": { "file": { "type": "string", "description": "File content.", "format": "binary" } } }, "encoding": { "file": { "style": "form" } } } } }, "responses": { "200": { "description": "Success" }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } }, "409": { "description": "Conflict", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsDataImportConflictResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsDataImportConflictResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsDataImportConflictResponseDto" } } } } } } }, "/api/v1/import/workplaces": { "post": { "tags": [ "Import" ], "summary": "Upload workplaces from *.xlsx file.", "parameters": [ { "name": "idFactoryName", "in": "query", "description": "ID of the record from the factory name dictionary.", "schema": { "type": "integer", "format": "int64" } }, { "name": "idProductionType", "in": "query", "description": "ID of the record from the production type dictionary.", "schema": { "type": "integer", "format": "int64" } } ], "requestBody": { "content": { "multipart/form-data": { "schema": { "type": "object", "properties": { "file": { "type": "string", "description": "File content.", "format": "binary" } } }, "encoding": { "file": { "style": "form" } } } } }, "responses": { "200": { "description": "Success" }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } }, "409": { "description": "Conflict", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/login/by-credentials": { "post": { "tags": [ "Login" ], "summary": "Endpoint to login user by username and password.", "requestBody": { "description": "Request to login user by username and password.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LoginRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/LoginRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/LoginRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/LoginResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/LoginResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/LoginResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/login/by-user-barcode": { "post": { "tags": [ "Login" ], "summary": "Endpoint to login user by user's barcode.", "requestBody": { "description": "Request to login user by user's barcode.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LoginByUserBarcodeRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/LoginByUserBarcodeRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/LoginByUserBarcodeRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/LoginResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/LoginResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/LoginResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/logout/from-system": { "post": { "tags": [ "Login" ], "summary": "Endpoint to logout user.", "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/LogoutResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/LogoutResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/LogoutResponseDto" } } } } } } }, "/api/v1/production-types": { "get": { "tags": [ "ProductionType" ], "summary": "Endpoint to get dictionary with production types.", "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ProductionTypeResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ProductionTypeResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ProductionTypeResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/reasons": { "get": { "tags": [ "Reason" ], "summary": "Endpoint to get reasons.", "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ReasonWithControlPlanResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ReasonWithControlPlanResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ReasonWithControlPlanResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } }, "post": { "tags": [ "Reason" ], "summary": "Endpoint to register new reason.", "requestBody": { "description": "Request to register new reason.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ReasonCreateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ReasonCreateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/ReasonCreateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ReasonResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ReasonResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ReasonResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/reasons/full-data-profile": { "get": { "tags": [ "Reason" ], "summary": "Endpoint to get reason with full data for given reason detail.", "parameters": [ { "name": "idReasonDetail", "in": "query", "description": "ID of the reason detail to get data profile for.", "schema": { "minimum": 1, "type": "integer", "format": "int64" } } ], "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ReasonFullDataProfileResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ReasonFullDataProfileResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ReasonFullDataProfileResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/reasons/{idReason}": { "put": { "tags": [ "Reason" ], "summary": "Endpoint to update existing reason.", "parameters": [ { "name": "idReason", "in": "path", "description": "ID of the reason to update.", "required": true, "schema": { "minimum": 1, "type": "integer", "format": "int64" } } ], "requestBody": { "description": "Request to update existing reason.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ReasonUpdateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ReasonUpdateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/ReasonUpdateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ReasonResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ReasonResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ReasonResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } }, "delete": { "tags": [ "Reason" ], "summary": "Endpoint to delete existing reason.", "parameters": [ { "name": "idReason", "in": "path", "description": "ID of the reason.", "required": true, "schema": { "type": "integer", "format": "int64" } } ], "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/SimpleResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/SimpleResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/SimpleResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/reasons/{idReason}/actions": { "post": { "tags": [ "Reason" ], "summary": "Endpoint to register new connection between reason and action.", "parameters": [ { "name": "idReason", "in": "path", "required": true, "schema": { "type": "integer", "format": "int64" } } ], "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ConnectionReasonActionCreateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ConnectionReasonActionCreateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/ConnectionReasonActionCreateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ConnectionReasonActionResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ConnectionReasonActionResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ConnectionReasonActionResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/reasons/{idReason}/actions/{idAction}": { "delete": { "tags": [ "Reason" ], "summary": "Endpoint to delete connection between reason and action.", "parameters": [ { "name": "idReason", "in": "path", "required": true, "schema": { "type": "integer", "format": "int64" } }, { "name": "idAction", "in": "path", "required": true, "schema": { "type": "integer", "format": "int64" } } ], "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/SimpleResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/SimpleResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/SimpleResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/reason-details": { "get": { "tags": [ "ReasonDetail" ], "summary": "Endpoint to get reason details.", "parameters": [ { "name": "idControlPlan", "in": "query", "description": "Optional ID of the control plan to filter reason details.", "schema": { "minimum": 1, "type": "integer", "format": "int64" } }, { "name": "idDetail", "in": "query", "description": "Optional ID of the detail to compute whether reason has active repairs for given detail.", "schema": { "minimum": 1, "type": "integer", "format": "int64" } } ], "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ReasonDetailResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ReasonDetailResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ReasonDetailResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } }, "post": { "tags": [ "ReasonDetail" ], "summary": "Endpoint to register new reason details.", "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ReasonDetailCreateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ReasonDetailCreateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/ReasonDetailCreateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ReasonDetailResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ReasonDetailResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ReasonDetailResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/reason-details/{idReasonDetail}": { "put": { "tags": [ "ReasonDetail" ], "summary": "Endpoint to update existing reason details.", "parameters": [ { "name": "idReasonDetail", "in": "path", "required": true, "schema": { "minimum": 1, "type": "integer", "format": "int64" } } ], "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ReasonDetailUpdateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ReasonDetailUpdateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/ReasonDetailUpdateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ReasonDetailResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ReasonDetailResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ReasonDetailResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/repairs": { "get": { "tags": [ "Repair" ], "summary": "Endpoint to get repairs filtered by ID of the detail.", "parameters": [ { "name": "idDetail", "in": "query", "description": "ID of the detail to get repairs for.", "schema": { "type": "integer", "format": "int64" } } ], "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/RepairWithReasonNameResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/RepairWithReasonNameResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/RepairWithReasonNameResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } }, "post": { "tags": [ "Repair" ], "summary": "Endpoint to register new repair.", "requestBody": { "description": "Request to register new repair.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RepairCreateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/RepairCreateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/RepairCreateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/RepairResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/RepairResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/RepairResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/repairs/bulk": { "post": { "tags": [ "Repair" ], "summary": "Endpoint to bulk register new repairs.", "requestBody": { "description": "Request to bulk register new repairs.", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/RepairCreateRequestDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/RepairCreateRequestDto" } } }, "application/*+json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/RepairCreateRequestDto" } } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/RepairResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/RepairResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/RepairResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/repairs/finish": { "post": { "tags": [ "Repair" ], "summary": "Endpoint to finish repairs.", "requestBody": { "description": "Request to finish repairs.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RepairFinishRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/RepairFinishRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/RepairFinishRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/RepairResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/RepairResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/RepairResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/roles": { "get": { "tags": [ "Role" ], "summary": "Endpoint to get dictionary with roles.", "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/RoleResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/RoleResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/RoleResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/users": { "get": { "tags": [ "User" ], "summary": "Endpoint to get users.", "parameters": [ { "name": "idFactoryName", "in": "query", "description": "Optional ID of the factory name to filter workgroups by.", "schema": { "type": "integer", "format": "int64" } }, { "name": "idProductionType", "in": "query", "description": "Optional ID of the production type to filter workgroups by.", "schema": { "type": "integer", "format": "int64" } } ], "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/UserResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/UserResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/UserResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } }, "post": { "tags": [ "User" ], "summary": "Endpoint to register new user.", "requestBody": { "description": "Request to register new user.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserCreateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/UserCreateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/UserCreateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/UserCreateRequestDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/UserCreateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/UserCreateRequestDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/users/{idUser}": { "put": { "tags": [ "User" ], "summary": "Endpoint to update existing user.", "parameters": [ { "name": "idUser", "in": "path", "description": "ID of the user to update.", "required": true, "schema": { "type": "integer", "format": "int64" } } ], "requestBody": { "description": "Request to update existing user.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserUpdateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/UserUpdateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/UserUpdateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/UserUpdateRequestDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/UserUpdateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/UserUpdateRequestDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/works/{idWork}/stop": { "post": { "tags": [ "Work" ], "summary": "Endpoint to stop the work.", "parameters": [ { "name": "idWork", "in": "path", "description": "ID of the work to stop.", "required": true, "schema": { "minimum": 1, "type": "integer", "format": "int64" } } ], "requestBody": { "description": "Request to stop the work.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WorkStopRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/WorkStopRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/WorkStopRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/WorkResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/WorkResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/WorkResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/works/{idWork}/finish": { "post": { "tags": [ "Work" ], "summary": "Endpoint to finish the work.", "parameters": [ { "name": "idWork", "in": "path", "description": "ID of the work to stop.", "required": true, "schema": { "minimum": 1, "type": "integer", "format": "int64" } } ], "requestBody": { "description": "Request to finish the work.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WorkFinishRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/WorkFinishRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/WorkFinishRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/WorkResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/WorkResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/WorkResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/workgroups": { "get": { "tags": [ "Workgroup" ], "summary": "Get all workgroups.", "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WorkgroupResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WorkgroupResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WorkgroupResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } }, "post": { "tags": [ "Workgroup" ], "summary": "Endpoint to register new workgroup.", "requestBody": { "description": "Request to register new workgroup.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WorkgroupCreateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/WorkgroupCreateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/WorkgroupCreateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/WorkgroupResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/WorkgroupResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/WorkgroupResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/workgroups/summary": { "get": { "tags": [ "Workgroup" ], "summary": "Get all workgroups summary.", "parameters": [ { "name": "idFactoryName", "in": "query", "description": "Optional ID of the factory name to filter workgroups by.", "schema": { "type": "integer", "format": "int64" } }, { "name": "idProductionType", "in": "query", "description": "Optional ID of the production type to filter workgroups by.", "schema": { "type": "integer", "format": "int64" } } ], "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WorkgroupSummaryResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WorkgroupSummaryResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WorkgroupSummaryResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/workgroups/{idWorkgroup}": { "put": { "tags": [ "Workgroup" ], "summary": "Endpoint to update existing workgroup.", "parameters": [ { "name": "idWorkgroup", "in": "path", "description": "ID of the workgroup to update.", "required": true, "schema": { "minimum": 1, "type": "integer", "format": "int64" } } ], "requestBody": { "description": "Request to update existing workgroup.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WorkgroupUpdateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/WorkgroupUpdateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/WorkgroupUpdateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/WorkgroupResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/WorkgroupResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/WorkgroupResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/workgroups/{idWorkgroup}/users": { "post": { "tags": [ "Workgroup" ], "summary": "Endpoint to register new connection between user (team leader) and workgroup.", "parameters": [ { "name": "idWorkgroup", "in": "path", "required": true, "schema": { "minimum": 1, "type": "integer", "format": "int64" } } ], "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ConnectionUserWorkgroupCreateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ConnectionUserWorkgroupCreateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/ConnectionUserWorkgroupCreateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ConnectionUserWorkgroupResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ConnectionUserWorkgroupResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ConnectionUserWorkgroupResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/workgroups/{idWorkgroup}/users/{idUser}": { "delete": { "tags": [ "Workgroup" ], "summary": "Endpoint to delete existing connection between user (team leader) and workgroup.", "parameters": [ { "name": "idWorkgroup", "in": "path", "required": true, "schema": { "minimum": 1, "type": "integer", "format": "int64" } }, { "name": "idUser", "in": "path", "required": true, "schema": { "minimum": 1, "type": "integer", "format": "int64" } } ], "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/DeleteResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/DeleteResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/DeleteResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/workgroups/{idWorkgroup}/workplace": { "post": { "tags": [ "Workgroup" ], "summary": "Endpoint to register new connection between workplace and workgroup.", "parameters": [ { "name": "idWorkgroup", "in": "path", "required": true, "schema": { "minimum": 1, "type": "integer", "format": "int64" } } ], "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ConnectionWorkplaceWorkgroupCreateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ConnectionWorkplaceWorkgroupCreateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/ConnectionWorkplaceWorkgroupCreateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ConnectionWorkplaceWorkgroupResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ConnectionWorkplaceWorkgroupResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ConnectionWorkplaceWorkgroupResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/workgroups/{idWorkgroup}/workplaces/{idWorkplace}": { "delete": { "tags": [ "Workgroup" ], "summary": "Endpoint to delete existing connection between workplace and workgroup.", "parameters": [ { "name": "idWorkgroup", "in": "path", "required": true, "schema": { "minimum": 1, "type": "integer", "format": "int64" } }, { "name": "idWorkplace", "in": "path", "required": true, "schema": { "minimum": 1, "type": "integer", "format": "int64" } } ], "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/DeleteResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/DeleteResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/DeleteResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/workplaces": { "get": { "tags": [ "Workplace" ], "summary": "Endpoint to get workplaces, optionally filtered by factory.", "parameters": [ { "name": "idFactoryName", "in": "query", "description": "Optional ID of the factory name to find ID factory to filter workplaces by this factory.", "schema": { "type": "integer", "format": "int64" } }, { "name": "idProductionType", "in": "query", "description": "Optional ID of the production type to find ID factory to filter workplaces by this factory.", "schema": { "type": "integer", "format": "int64" } } ], "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WorkplaceResponseDto" } } }, "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WorkplaceResponseDto" } } }, "text/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WorkplaceResponseDto" } } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } }, "post": { "tags": [ "Workplace" ], "summary": "Endpoint to register new workplace.", "requestBody": { "description": "Request to register new workplace.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WorkplaceCreateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/WorkplaceCreateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/WorkplaceCreateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/WorkplaceResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/WorkplaceResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/WorkplaceResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/workplaces/{idWorkplace}": { "put": { "tags": [ "Workplace" ], "summary": "Endpoint to update existing workplace.", "parameters": [ { "name": "idWorkplace", "in": "path", "description": "ID of the workplace to update.", "required": true, "schema": { "minimum": 1, "type": "integer", "format": "int64" } } ], "requestBody": { "description": "Request to update existing workplace.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WorkplaceUpdateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/WorkplaceUpdateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/WorkplaceUpdateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/WorkplaceResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/WorkplaceResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/WorkplaceResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/workplaces/{idWorkplace}/reasons": { "post": { "tags": [ "Workplace" ], "summary": "Endpoint to register new connection between workplace and reason.", "parameters": [ { "name": "idWorkplace", "in": "path", "description": "ID of the workplace to add reason.", "required": true, "schema": { "type": "integer", "format": "int64" } } ], "requestBody": { "description": "Request to add reason to workplace.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ConnectionWorkplaceReasonCreateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ConnectionWorkplaceReasonCreateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/ConnectionWorkplaceReasonCreateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ConnectionWorkplaceReasonResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ConnectionWorkplaceReasonResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ConnectionWorkplaceReasonResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/workplaces/{idWorkplace}/actions": { "post": { "tags": [ "Workplace" ], "summary": "Endpoint to register new connection between workplace and action.", "parameters": [ { "name": "idWorkplace", "in": "path", "description": "ID of the workplace to add action.", "required": true, "schema": { "minimum": 1, "type": "integer", "format": "int64" } } ], "requestBody": { "description": "Request to add action to workplace.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ConnectionWorkplaceActionCreateRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ConnectionWorkplaceActionCreateRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/ConnectionWorkplaceActionCreateRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ConnectionWorkplaceActionResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ConnectionWorkplaceActionResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ConnectionWorkplaceActionResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/workplaces/{idWorkplace}/actions/{idAction}": { "delete": { "tags": [ "Workplace" ], "summary": "Endpoint to delete existing connection between workplace and action.", "parameters": [ { "name": "idWorkplace", "in": "path", "description": "ID of the workplace to delete connection with action.", "required": true, "schema": { "minimum": 1, "type": "integer", "format": "int64" } }, { "name": "idAction", "in": "path", "description": "ID of the action to delete connection with workplace.", "required": true, "schema": { "minimum": 1, "type": "integer", "format": "int64" } } ], "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/DeleteResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/DeleteResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/DeleteResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } }, "/api/v1/workplaces/scan": { "post": { "tags": [ "Workplace" ], "summary": "Endpoint to scan workplace barcode to start work on this workplace.", "requestBody": { "description": "Request with scanned barcode.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WorkplaceScanRequestDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/WorkplaceScanRequestDto" } }, "application/*+json": { "schema": { "$ref": "#/components/schemas/WorkplaceScanRequestDto" } } } }, "responses": { "200": { "description": "Success", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/WorkplaceScanResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/WorkplaceScanResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/WorkplaceScanResponseDto" } } } }, "400": { "description": "Bad Request", "content": { "text/plain": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "application/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } }, "text/json": { "schema": { "$ref": "#/components/schemas/ProblemDetailsResponseDto" } } } } } } } }, "components": { "schemas": { "ActionCreateRequestDto": { "type": "object", "properties": { "actionName": { "type": "string", "description": "Name of the action.", "nullable": true }, "idProductionType": { "type": "integer", "description": "ID of the production type associated with this action.", "format": "int64" } }, "additionalProperties": false, "description": "Request to create new action." }, "ActionPointResponseDto": { "type": "object", "properties": { "actionPointName": { "type": "string", "description": "Name of the action point.", "nullable": true } }, "additionalProperties": false, "description": "Element of the response: action point." }, "ActionResponseDto": { "type": "object", "properties": { "idAction": { "type": "integer", "description": "ID of the action.", "format": "int64" }, "actionName": { "type": "string", "description": "Name of the action.", "nullable": true }, "idProductionType": { "type": "integer", "description": "ID of the production type associated with this action.", "format": "int64" } }, "additionalProperties": false, "description": "Element of the response: action." }, "ActionUpdateRequestDto": { "type": "object", "properties": { "actionName": { "type": "string", "description": "Name of the action.", "nullable": true }, "idProductionType": { "type": "integer", "description": "ID of the production type associated with this action.", "format": "int64" } }, "additionalProperties": false, "description": "Request to update existing action." }, "ActionWithControlPlansInfoResponseDto": { "type": "object", "properties": { "idAction": { "type": "integer", "description": "ID of the action.", "format": "int64" }, "actionName": { "type": "string", "description": "Name of the action.", "nullable": true }, "idProductionType": { "type": "integer", "description": "ID of the production type associated with this action.", "format": "int64" }, "controlPlansAssociated": { "type": "integer", "description": "Number of control plans associated with this action.", "format": "int32" }, "controlPlansTotal": { "type": "integer", "description": "Total number of control plans.", "format": "int32" } }, "additionalProperties": false, "description": "Element of the response: action." }, "CauserCreateRequestDto": { "type": "object", "properties": { "causerName": { "type": "string", "description": "Name of the causer.", "nullable": true }, "idProductionType": { "type": "integer", "description": "ID of the production type to which this causer relates.", "format": "int64" } }, "additionalProperties": false, "description": "Request to create new causer." }, "CauserResponseDto": { "type": "object", "properties": { "idCauser": { "type": "integer", "description": "ID of the causer.", "format": "int64" }, "causerName": { "type": "string", "description": "Name of the causer.", "nullable": true }, "idProductionType": { "type": "integer", "description": "ID of the production type to which this causer relates.", "format": "int64", "nullable": true } }, "additionalProperties": false, "description": "Element of the response: causer." }, "CauserUpdateRequestDto": { "type": "object", "properties": { "causerName": { "type": "string", "description": "Name of the causer.", "nullable": true }, "idProductionType": { "type": "integer", "description": "ID of the production type to which this causer relates.", "format": "int64" } }, "additionalProperties": false, "description": "Request to update existing causer." }, "CheckCreateRequestDto": { "type": "object", "properties": { "checkDescription": { "type": "string", "description": "Description of the check.", "nullable": true }, "checkActive": { "type": "boolean", "description": "If check is active." } }, "additionalProperties": false, "description": "Request to create new check." }, "CheckListCreateRequestDto": { "type": "object", "properties": { "checkDescription1": { "type": "string", "description": "Description of the check 1 in the list.", "nullable": true }, "checkDescription2": { "type": "string", "description": "Description of the check 2 in the list.", "nullable": true }, "checkDescription3": { "type": "string", "description": "Description of the check 3 in the list.", "nullable": true }, "checkDescription4": { "type": "string", "description": "Description of the check 4 in the list.", "nullable": true } }, "additionalProperties": false, "description": "Request to create new check list.\r\nSuch checks must be performed after finishing working with the detail on the workplace." }, "CheckListResponseDto": { "type": "object", "properties": { "idCheckList": { "type": "integer", "description": "ID of the check list.", "format": "int64" }, "checkDescription1": { "type": "string", "description": "Description of the check 1 in the list.", "nullable": true }, "checkDescription2": { "type": "string", "description": "Description of the check 2 in the list.", "nullable": true }, "checkDescription3": { "type": "string", "description": "Description of the check 3 in the list.", "nullable": true }, "checkDescription4": { "type": "string", "description": "Description of the check 4 in the list.", "nullable": true } }, "additionalProperties": false, "description": "Element of the response: check list.\r\nSuch checks must be performed after finishing working with the detail on the workplace." }, "CheckListUpdateRequestDto": { "type": "object", "properties": { "checkDescription1": { "type": "string", "description": "Description of the check 1 in the list.", "nullable": true }, "checkDescription2": { "type": "string", "description": "Description of the check 2 in the list.", "nullable": true }, "checkDescription3": { "type": "string", "description": "Description of the check 3 in the list.", "nullable": true }, "checkDescription4": { "type": "string", "description": "Description of the check 4 in the list.", "nullable": true } }, "additionalProperties": false, "description": "Request to update existing check list.\r\nSuch checks must be performed after finishing working with the detail on the workplace." }, "CheckResponseDto": { "type": "object", "properties": { "idCheck": { "type": "integer", "description": "ID of the check.", "format": "int64" }, "checkDescription": { "type": "string", "description": "Description of the check.", "nullable": true }, "checkActive": { "type": "boolean", "description": "If check is active." } }, "additionalProperties": false, "description": "Element of the response: available checks to build checklists.\r\nSuch checks must be performed after finishing working with the detail on the workplace." }, "CheckUpdateRequestDto": { "type": "object", "properties": { "checkDescription": { "type": "string", "description": "Description of the check.", "nullable": true }, "checkActive": { "type": "boolean", "description": "If check is active." } }, "additionalProperties": false, "description": "Request to create new check." }, "ConnectionReasonActionCreateRequestDto": { "type": "object", "properties": { "idAction": { "type": "integer", "description": "ID of the action to connect with reason.", "format": "int64" } }, "additionalProperties": false, "description": "Request to add action to reason." }, "ConnectionReasonActionResponseDto": { "type": "object", "properties": { "idReasonActionConnection": { "type": "integer", "description": "ID of the connection between reason and action to update.", "format": "int64" }, "idReason": { "type": "integer", "description": "ID of the reason.", "format": "int64" }, "idAction": { "type": "integer", "description": "ID of the action.", "format": "int64" } }, "additionalProperties": false, "description": "Element of the response: connection between reason and action." }, "ConnectionUserWorkgroupCreateRequestDto": { "type": "object", "properties": { "idUser": { "type": "integer", "description": "ID of the user to add to workgroup.", "format": "int64" } }, "additionalProperties": false, "description": "Request to add user (team leader) to workgroup." }, "ConnectionUserWorkgroupResponseDto": { "type": "object", "properties": { "idConnectionUserWorkgroup": { "type": "integer", "description": "ID of the connection between user and workgroup.", "format": "int64" }, "idUser": { "type": "integer", "description": "ID of the user to add to workgroup.", "format": "int64" }, "idWorkgroup": { "type": "integer", "description": "ID of the workgroup to add user to.", "format": "int64" } }, "additionalProperties": false, "description": "Element of the response: connection between user and workgroup." }, "ConnectionWorkplaceActionCreateRequestDto": { "type": "object", "properties": { "idAction": { "type": "integer", "description": "ID of the action.", "format": "int64" } }, "additionalProperties": false, "description": "Request to create connection between workplace and action." }, "ConnectionWorkplaceActionResponseDto": { "type": "object", "properties": { "idConnectionWorkplaceAction": { "type": "integer", "description": "ID of the connection between workplace and action.", "format": "int64" }, "idWorkplace": { "type": "integer", "description": "ID of the workplace.", "format": "int64" }, "idAction": { "type": "integer", "description": "ID of the action.", "format": "int64" } }, "additionalProperties": false, "description": "Element of the response: connection between workplace and action." }, "ConnectionWorkplaceReasonCreateRequestDto": { "type": "object", "properties": { "idReason": { "type": "integer", "description": "ID of the reason to connect with workplace.", "format": "int64" }, "connectionNumber": { "type": "integer", "description": "Number of connections.", "format": "int32" } }, "additionalProperties": false, "description": "Request to add reason to workplace." }, "ConnectionWorkplaceReasonResponseDto": { "type": "object", "properties": { "idWorkplaceReasonConnection": { "type": "integer", "description": "ID of the connection between workplace and reason.", "format": "int64" }, "idWorkplace": { "type": "integer", "description": "ID of the workplace.", "format": "int64" }, "idReason": { "type": "integer", "description": "ID of the reason.", "format": "int64" }, "connectionNumber": { "type": "integer", "description": "Number of the connections.", "format": "int32" } }, "additionalProperties": false, "description": "Element of the response: connection between workplace and reason." }, "ConnectionWorkplaceWorkgroupCreateRequestDto": { "type": "object", "properties": { "idWorkplace": { "type": "integer", "description": "ID of the workplace to associate with workgroup.", "format": "int64" } }, "additionalProperties": false, "description": "Request to associate workplace with workgroup." }, "ConnectionWorkplaceWorkgroupResponseDto": { "type": "object", "properties": { "idConnectionWorkplaceWorkgroup": { "type": "integer", "description": "ID of the connection between workplace and workgroup.", "format": "int64" }, "idWorkplace": { "type": "integer", "description": "ID of the workplace associated with workgroup.", "format": "int64" }, "idWorkgroup": { "type": "integer", "description": "ID of the workgroup associated with workplace.", "format": "int64" } }, "additionalProperties": false, "description": "Element of the response: connection between workplace and workgroup." }, "ControlPlanCreateRequestDto": { "type": "object", "properties": { "cpName": { "type": "string", "description": "Name of the control plan.", "nullable": true }, "cpDescriptionField1": { "type": "string", "description": "Decription field 1 of the control plan.", "nullable": true }, "cpDescriptionField2": { "type": "string", "description": "Decription field 2 of the control plan.", "nullable": true }, "cpDescriptionField3": { "type": "string", "description": "Decription field 3 of the control plan.", "nullable": true }, "cpDescriptionField4": { "type": "string", "description": "Decription field 4 of the control plan.", "nullable": true }, "cpDescriptionField5": { "type": "string", "description": "Decription field 5 of the control plan.", "nullable": true }, "cpDescriptionField6": { "type": "string", "description": "Decription field 6 of the control plan.", "nullable": true }, "cpDescriptionField7": { "type": "string", "description": "Decription field 7 of the control plan.", "nullable": true }, "cpDescriptionField8": { "type": "string", "description": "Decription field 8 of the control plan.", "nullable": true } }, "additionalProperties": false, "description": "Request to create new control plan." }, "ControlPlanResponseDto": { "type": "object", "properties": { "idCp": { "type": "integer", "description": "ID of the control plan.", "format": "int64" }, "cpName": { "type": "string", "description": "Name of the control plan.", "nullable": true }, "cpDescriptionField1": { "type": "string", "description": "Decription field 1 of the control plan.", "nullable": true }, "cpDescriptionField2": { "type": "string", "description": "Decription field 2 of the control plan.", "nullable": true }, "cpDescriptionField3": { "type": "string", "description": "Decription field 3 of the control plan.", "nullable": true }, "cpDescriptionField4": { "type": "string", "description": "Decription field 4 of the control plan.", "nullable": true }, "cpDescriptionField5": { "type": "string", "description": "Decription field 5 of the control plan.", "nullable": true }, "cpDescriptionField6": { "type": "string", "description": "Decription field 6 of the control plan.", "nullable": true }, "cpDescriptionField7": { "type": "string", "description": "Decription field 7 of the control plan.", "nullable": true }, "cpDescriptionField8": { "type": "string", "description": "Decription field 8 of the control plan.", "nullable": true } }, "additionalProperties": false, "description": "Element of the response: control plan." }, "ControlPlanUpdateRequestDto": { "type": "object", "properties": { "cpName": { "type": "string", "description": "Name of the control plan.", "nullable": true }, "cpDescriptionField1": { "type": "string", "description": "Decription field 1 of the control plan.", "nullable": true }, "cpDescriptionField2": { "type": "string", "description": "Decription field 2 of the control plan.", "nullable": true }, "cpDescriptionField3": { "type": "string", "description": "Decription field 3 of the control plan.", "nullable": true }, "cpDescriptionField4": { "type": "string", "description": "Decription field 4 of the control plan.", "nullable": true }, "cpDescriptionField5": { "type": "string", "description": "Decription field 5 of the control plan.", "nullable": true }, "cpDescriptionField6": { "type": "string", "description": "Decription field 6 of the control plan.", "nullable": true }, "cpDescriptionField7": { "type": "string", "description": "Decription field 7 of the control plan.", "nullable": true }, "cpDescriptionField8": { "type": "string", "description": "Decription field 8 of the control plan.", "nullable": true } }, "additionalProperties": false, "description": "Request to update existing control plan." }, "DataImportConflictErrorDescriptionDto": { "type": "object", "properties": { "fieldErrorMessage": { "type": "string", "description": "Specific description of data conflict errors for particular field type.", "nullable": true }, "fieldName": { "type": "string", "description": "Name of the field type with data conflict errors.", "nullable": true }, "fieldValues": { "type": "array", "items": { "type": "string" }, "description": "Conflicting field values from the import request.", "nullable": true } }, "additionalProperties": false, "description": "Validation error to data conflicts during imports. One object per conflicting field type." }, "DataImportConflictErrorResponseDto": { "type": "object", "properties": { "dataImportConflictSummary": { "$ref": "#/components/schemas/DataImportConflictSummaryDto" }, "generalErrors": { "type": "array", "items": { "$ref": "#/components/schemas/ObjectGeneralErrorDto" }, "description": "General validation errors that can not be tied to a particlar field.", "nullable": true }, "pathVariableErrors": { "type": "array", "items": { "$ref": "#/components/schemas/PathVariableErrorDto" }, "description": "Validation errors that can be tied to a particular path variable.", "nullable": true }, "queryParameterErrors": { "type": "array", "items": { "$ref": "#/components/schemas/QueryParameterErrorDto" }, "description": "Validation errors that can be tied to a particular query parameter.", "nullable": true }, "fieldErrors": { "type": "array", "items": { "$ref": "#/components/schemas/FieldErrorDto" }, "description": "Validation errors that can be tied to a particular field.", "nullable": true } }, "additionalProperties": false, "description": "Envelope for validation errors." }, "DataImportConflictSummaryDto": { "type": "object", "properties": { "errorMessage": { "type": "string", "description": "General description of data conflict errors.", "nullable": true }, "conflictingFields": { "type": "array", "items": { "$ref": "#/components/schemas/DataImportConflictErrorDescriptionDto" }, "description": "Details about conflicting fields. One object per conflicting field type.", "nullable": true } }, "additionalProperties": false, "description": "Validation errors specific to data conflicts during imports." }, "DeleteResponseDto": { "type": "object", "properties": { "numberOfDeletedRecords": { "type": "integer", "description": "Number of deleted records.", "format": "int64" }, "message": { "type": "string", "description": "Message of the response.", "nullable": true } }, "additionalProperties": false, "description": "Response on delete operations." }, "DetailScanRequestDto": { "type": "object", "properties": { "detailBarcode": { "type": "string", "description": "Barcode of the detail.", "nullable": true } }, "additionalProperties": false, "description": "Request with scanned detail barcode to get related information." }, "DetailWithPartElementInfoResponseDto": { "type": "object", "properties": { "idDetail": { "type": "integer", "description": "ID of the detail.", "format": "int64" }, "detailBarcode": { "type": "string", "description": "Barcode of the detail.", "nullable": true }, "detailStatusCode": { "type": "string", "description": "Status code of the detail.", "nullable": true }, "detailStatusName": { "type": "string", "description": "Status name of the detail in the preffered language.", "nullable": true }, "reference": { "type": "string", "description": "Number of the reference (order).", "nullable": true }, "planningDate": { "type": "string", "description": "Planning date when element will be finished.", "format": "date-time", "nullable": true }, "productionDate": { "type": "string", "description": "Production date of the element.", "format": "date-time", "nullable": true }, "deliveryDate": { "type": "string", "description": "Delivery date of the element.", "format": "date-time", "nullable": true }, "nrOfWindowsFinished": { "type": "integer", "description": "Number of windows of the element.", "format": "int32" }, "nrOfWindowsTotal": { "type": "integer", "description": "Number of windows of the element.", "format": "int32" }, "nrOfDoorsFinished": { "type": "integer", "description": "Number of doors of the element.", "format": "int32" }, "nrOfDoorsTotal": { "type": "integer", "description": "Number of doors of the element.", "format": "int32" }, "nrOfSlidingDoorsFinished": { "type": "integer", "description": "Number of sliding doors of the element.", "format": "int32" }, "nrOfSlidingDoorsTotal": { "type": "integer", "description": "Number of sliding doors of the element.", "format": "int32" }, "elementNr": { "type": "string", "description": "Number of element.", "nullable": true }, "windowNr": { "type": "string", "description": "Number of window.", "nullable": true }, "partNr": { "type": "string", "description": "Number of part.", "nullable": true }, "partComment": { "type": "string", "description": "Comment on part.", "nullable": true }, "idWork": { "type": "integer", "description": "ID of the created work as a result of detail scan.", "format": "int64" }, "actionPoints": { "type": "array", "items": { "$ref": "#/components/schemas/ActionPointResponseDto" }, "description": "Action points of the detail.", "nullable": true }, "repairs": { "type": "array", "items": { "$ref": "#/components/schemas/RepairResponseDto" }, "description": "Repairs of the detail.", "nullable": true } }, "additionalProperties": false, "description": "Detail entity with additional information about related part and element." }, "ErrorResponseDto": { "type": "object", "properties": { "generalErrors": { "type": "array", "items": { "$ref": "#/components/schemas/ObjectGeneralErrorDto" }, "description": "General validation errors that can not be tied to a particlar field.", "nullable": true }, "pathVariableErrors": { "type": "array", "items": { "$ref": "#/components/schemas/PathVariableErrorDto" }, "description": "Validation errors that can be tied to a particular path variable.", "nullable": true }, "queryParameterErrors": { "type": "array", "items": { "$ref": "#/components/schemas/QueryParameterErrorDto" }, "description": "Validation errors that can be tied to a particular query parameter.", "nullable": true }, "fieldErrors": { "type": "array", "items": { "$ref": "#/components/schemas/FieldErrorDto" }, "description": "Validation errors that can be tied to a particular field.", "nullable": true } }, "additionalProperties": false, "description": "Envelope for validation errors." }, "FactoryCreateRequestDto": { "type": "object", "properties": { "idFactoryName": { "type": "integer", "description": "ID of the record in the factory names dictionary.", "format": "int64" }, "idProductionType": { "type": "integer", "description": "ID of the record in the production types dictionary.", "format": "int64" } }, "additionalProperties": false, "description": "Request to register new factory (association between factory name and production type)." }, "FactoryNameResponseDto": { "type": "object", "properties": { "idFactoryName": { "type": "integer", "description": "ID of the record in the factory names dictionary.", "format": "int64" }, "factoryName": { "type": "string", "description": "Human-readable name of the factory.", "nullable": true } }, "additionalProperties": false, "description": "Element of the response: record of the factory name dictionary." }, "FactoryResponseDto": { "type": "object", "properties": { "idFactory": { "type": "integer", "format": "int64" }, "idFactoryName": { "type": "integer", "format": "int64" }, "factoryName": { "type": "string", "nullable": true }, "idProductionType": { "type": "integer", "format": "int64" }, "productionTypeName": { "type": "string", "nullable": true } }, "additionalProperties": false, "description": "Element of the response: factory." }, "FieldErrorDto": { "type": "object", "properties": { "fieldName": { "type": "string", "description": "Name of the field to which an error is tied.", "nullable": true }, "fieldErrorDescriptions": { "type": "array", "items": { "$ref": "#/components/schemas/ObjectErrorDescriptionDto" }, "description": "Descriptions for each error tied to the specified field.", "nullable": true } }, "additionalProperties": false, "description": "Validation error tied to the particular field." }, "LoginByUserBarcodeRequestDto": { "type": "object", "properties": { "userBarcode": { "type": "string", "description": "User's barcode.", "nullable": true } }, "additionalProperties": false, "description": "Request for login attempt by user's barcode." }, "LoginRequestDto": { "type": "object", "properties": { "login": { "type": "string", "description": "User's login.", "nullable": true }, "password": { "type": "array", "items": { "type": "string" }, "description": "User's password.", "nullable": true } }, "additionalProperties": false, "description": "Request for the login attempt." }, "LoginResponseDto": { "type": "object", "properties": { "message": { "type": "string", "description": "Human-readable message about successful or unsuccessful login.", "nullable": true }, "firstName": { "type": "string", "description": "First name of the user in case of the successful login.", "nullable": true }, "lastName": { "type": "string", "description": "Last name of the user in case of the successful login.", "nullable": true }, "roleCode": { "type": "string", "description": "Role code of the user in case of the successful login.", "nullable": true }, "roleName": { "type": "string", "description": "Role name of the user in the preferred language in case of the successful login.", "nullable": true } }, "additionalProperties": false, "description": "Response of the login attempt." }, "LogoutResponseDto": { "type": "object", "properties": { "message": { "type": "string", "description": "Human-readable message about successful or unsuccessful login.", "nullable": true } }, "additionalProperties": false, "description": "Response of the login attempt." }, "ObjectErrorDescriptionDto": { "type": "object", "properties": { "errorMessage": { "type": "string", "description": "Error message explaining what is wrong with the field.", "nullable": true }, "details": { "description": "Optional additional details of the error. What exactly got wrong: particular records, etc.", "nullable": true } }, "additionalProperties": false, "description": "Description of the one specific error tied to the particular field." }, "ObjectGeneralErrorDto": { "type": "object", "properties": { "errorMessage": { "type": "string", "description": "Error message explaining what is wrong with the field.", "nullable": true }, "details": { "description": "Optional additional details of the error. What exactly got wrong: particular records, etc.", "nullable": true } }, "additionalProperties": false, "description": "Validation error that can't be tied to the particular field." }, "PathVariableErrorDto": { "type": "object", "properties": { "pathVariableName": { "type": "string", "description": "Name of the path variable to which an error is tied.", "nullable": true }, "pathVariableErrorDescriptions": { "type": "array", "items": { "$ref": "#/components/schemas/ObjectErrorDescriptionDto" }, "description": "Descriptions for each error tied to the specified path variable.", "nullable": true } }, "additionalProperties": false, "description": "Validation error tied to the particular path variable." }, "ProblemDetailsDataImportConflictResponseDto": { "type": "object", "properties": { "type": { "type": "string", "nullable": true }, "title": { "type": "string", "nullable": true }, "status": { "type": "integer", "format": "int32" }, "detail": { "type": "string", "nullable": true }, "instance": { "type": "string", "nullable": true }, "errors": { "$ref": "#/components/schemas/DataImportConflictErrorResponseDto" } }, "additionalProperties": false, "description": "Implementation of RFC 7807 Problem Details for HTTP APIs specific to data conflict validation errors." }, "ProblemDetailsResponseDto": { "type": "object", "properties": { "type": { "type": "string", "nullable": true }, "title": { "type": "string", "nullable": true }, "status": { "type": "integer", "format": "int32" }, "detail": { "type": "string", "nullable": true }, "instance": { "type": "string", "nullable": true }, "errors": { "$ref": "#/components/schemas/ErrorResponseDto" } }, "additionalProperties": false, "description": "Implementation of RFC 7807 Problem Details for HTTP APIs." }, "ProductionTypeResponseDto": { "type": "object", "properties": { "idProductionType": { "type": "integer", "description": "ID of the record in the production types dictionary.", "format": "int64" }, "productionTypeName": { "type": "string", "description": "Human-readable name of the production type.", "nullable": true } }, "additionalProperties": false, "description": "Element of the response: record of the production type dictionary." }, "QueryParameterErrorDto": { "type": "object", "properties": { "queryParameterName": { "type": "string", "description": "Name of the query parameter to which an error is tied.", "nullable": true }, "queryParameterErrorDescriptions": { "type": "array", "items": { "$ref": "#/components/schemas/ObjectErrorDescriptionDto" }, "description": "Descriptions for each error tied to the specified query parameter.", "nullable": true } }, "additionalProperties": false, "description": "Validation error tied to the particular query parameter." }, "ReasonCreateRequestDto": { "type": "object", "properties": { "idReasonDetail": { "type": "integer", "description": "ID of the corresponding reason detail.", "format": "int64" }, "idCauser": { "type": "integer", "description": "ID of the causer.", "format": "int64" } }, "additionalProperties": false, "description": "Request to create new reason." }, "ReasonDetailCreateRequestDto": { "type": "object", "properties": { "reasonName": { "type": "string", "description": "Name of the reason.", "nullable": true }, "idProductionType": { "type": "integer", "description": "Synthetic ID of the production type.", "format": "int64" }, "idControlPlan": { "type": "integer", "description": "ID of the control plan to which this reason detail is connected.", "format": "int64" }, "reasonBarcode": { "type": "string", "description": "Barcode of the reason.", "nullable": true }, "reasonActive": { "type": "boolean", "description": "Flag that signifies whether the reason is active." }, "reasonField1": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField2": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField3": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField4": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField5": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField6": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField7": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField8": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonPhoto1": { "type": "string", "description": "Base64-encoded photo 1 of the reason.", "nullable": true }, "reasonPhoto2": { "type": "string", "description": "Base64-encoded photo 2 of the reason.", "nullable": true }, "reasonPhoto3": { "type": "string", "description": "Base64-encoded photo 3 of the reason.", "nullable": true }, "reasonPhoto4": { "type": "string", "description": "Base64-encoded photo 4 of the reason.", "nullable": true }, "reasonPhoto5": { "type": "string", "description": "Base64-encoded photo 5 of the reason.", "nullable": true }, "reasonPhoto6": { "type": "string", "description": "Base64-encoded photo 6 of the reason.", "nullable": true } }, "additionalProperties": false, "description": "Request to create new reason detail." }, "ReasonDetailResponseDto": { "type": "object", "properties": { "idReasonDetail": { "type": "integer", "description": "ID of the reason detail.", "format": "int64" }, "reasonName": { "type": "string", "description": "Name of the reason.", "nullable": true }, "idProductionType": { "type": "integer", "description": "ID of the production type to which this reason detail is connected.", "format": "int64" }, "idControlPlan": { "type": "integer", "description": "ID of the control plan to which this reason detail is connected.", "format": "int64" }, "reasonBarcode": { "type": "string", "description": "Barcode of the reason.", "nullable": true }, "reasonActive": { "type": "boolean", "description": "Flag that signifies whether the reason is active." }, "reasonField1": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField2": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField3": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField4": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField5": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField6": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField7": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField8": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonPhoto1": { "type": "string", "description": "Base64-encoded photo 1 of the reason.", "nullable": true }, "reasonPhoto2": { "type": "string", "description": "Base64-encoded photo 2 of the reason.", "nullable": true }, "reasonPhoto3": { "type": "string", "description": "Base64-encoded photo 3 of the reason.", "nullable": true }, "reasonPhoto4": { "type": "string", "description": "Base64-encoded photo 4 of the reason.", "nullable": true }, "reasonPhoto5": { "type": "string", "description": "Base64-encoded photo 5 of the reason.", "nullable": true }, "reasonPhoto6": { "type": "string", "description": "Base64-encoded photo 6 of the reason.", "nullable": true } }, "additionalProperties": false, "description": "Element of the response: reason detail." }, "ReasonDetailUpdateRequestDto": { "type": "object", "properties": { "reasonName": { "type": "string", "description": "Name of the reason.", "nullable": true }, "idProductionType": { "type": "integer", "description": "Synthetic ID of the production type.", "format": "int64" }, "idControlPlan": { "type": "integer", "description": "ID of the control plan to which this reason detail is connected.", "format": "int64" }, "reasonBarcode": { "type": "string", "description": "Barcode of the reason.", "nullable": true }, "reasonActive": { "type": "boolean", "description": "Flag that signifies whether the reason is active." }, "reasonField1": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField2": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField3": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField4": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField5": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField6": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField7": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonField8": { "type": "string", "description": "Field of the reason.", "nullable": true }, "reasonPhoto1": { "type": "string", "description": "Base64-encoded photo 1 of the reason.", "nullable": true }, "reasonPhoto2": { "type": "string", "description": "Base64-encoded photo 2 of the reason.", "nullable": true }, "reasonPhoto3": { "type": "string", "description": "Base64-encoded photo 3 of the reason.", "nullable": true }, "reasonPhoto4": { "type": "string", "description": "Base64-encoded photo 4 of the reason.", "nullable": true }, "reasonPhoto5": { "type": "string", "description": "Base64-encoded photo 5 of the reason.", "nullable": true }, "reasonPhoto6": { "type": "string", "description": "Base64-encoded photo 6 of the reason.", "nullable": true } }, "additionalProperties": false, "description": "Request to update existing reason detail." }, "ReasonFullDataProfileResponseDto": { "type": "object", "properties": { "cpDescriptionField1": { "type": "string", "description": "Decription field 1 of the control plan.", "nullable": true }, "cpDescriptionField2": { "type": "string", "description": "Decription field 2 of the control plan.", "nullable": true }, "cpDescriptionField3": { "type": "string", "description": "Decription field 3 of the control plan.", "nullable": true }, "cpDescriptionField4": { "type": "string", "description": "Decription field 4 of the control plan.", "nullable": true }, "cpDescriptionField5": { "type": "string", "description": "Decription field 5 of the control plan.", "nullable": true }, "cpDescriptionField6": { "type": "string", "description": "Decription field 6 of the control plan.", "nullable": true }, "cpDescriptionField7": { "type": "string", "description": "Decription field 7 of the control plan.", "nullable": true }, "cpDescriptionField8": { "type": "string", "description": "Decription field 8 of the control plan.", "nullable": true }, "reasonField1": { "type": "string", "description": "Field 1 of the reason.", "nullable": true }, "reasonField2": { "type": "string", "description": "Field 2 of the reason.", "nullable": true }, "reasonField3": { "type": "string", "description": "Field 3 of the reason.", "nullable": true }, "reasonField4": { "type": "string", "description": "Field 4 of the reason.", "nullable": true }, "reasonField5": { "type": "string", "description": "Field 5 of the reason.", "nullable": true }, "reasonField6": { "type": "string", "description": "Field 6 of the reason.", "nullable": true }, "reasonField7": { "type": "string", "description": "Field 7 of the reason.", "nullable": true }, "reasonField8": { "type": "string", "description": "Field 8 of the reason.", "nullable": true }, "reasonPhoto1": { "type": "string", "description": "Base64-encoded photo 1 of the reason.", "format": "byte", "nullable": true }, "reasonPhoto2": { "type": "string", "description": "Base64-encoded photo 2 of the reason.", "format": "byte", "nullable": true }, "reasonPhoto3": { "type": "string", "description": "Base64-encoded photo 3 of the reason.", "format": "byte", "nullable": true }, "reasonPhoto4": { "type": "string", "description": "Base64-encoded photo 4 of the reason.", "format": "byte", "nullable": true }, "reasonPhoto5": { "type": "string", "description": "Base64-encoded photo 5 of the reason.", "format": "byte", "nullable": true }, "reasonPhoto6": { "type": "string", "description": "Base64-encoded photo 6 of the reason.", "format": "byte", "nullable": true }, "idCauser": { "type": "integer", "description": "ID of the causer.", "format": "int64" }, "causerName": { "type": "string", "description": "Name of the causer.", "nullable": true } }, "additionalProperties": false, "description": "Reason with full data profile." }, "ReasonResponseDto": { "type": "object", "properties": { "idReason": { "type": "integer", "description": "ID of the reason.", "format": "int64" }, "idReasonDetail": { "type": "integer", "description": "ID of the corresponding reason detail.", "format": "int64" }, "idCauser": { "type": "integer", "description": "ID of the causer.", "format": "int64" } }, "additionalProperties": false, "description": "Element of the response: reason." }, "ReasonUpdateRequestDto": { "type": "object", "properties": { "idReasonDetail": { "type": "integer", "description": "ID of the corresponding reason detail.", "format": "int64" }, "idCauser": { "type": "integer", "description": "ID of the causer.", "format": "int64" } }, "additionalProperties": false, "description": "Request to update existing reason." }, "ReasonWithControlPlanResponseDto": { "type": "object", "properties": { "idReason": { "type": "integer", "description": "ID of the reason.", "format": "int64" }, "idReasonDetail": { "type": "integer", "description": "ID of the corresponding reason detail.", "format": "int64" }, "idCauser": { "type": "integer", "description": "ID of the causer.", "format": "int64" }, "idCp": { "type": "integer", "description": "ID of the associated control plan.", "format": "int64" } }, "additionalProperties": false, "description": "Element of the response: reason." }, "RepairCreateRequestDto": { "type": "object", "properties": { "idWork": { "type": "integer", "description": "ID of the work associated with this repair.", "format": "int64" }, "idDetail": { "type": "integer", "description": "ID of the detail that was repaired.", "format": "int64" }, "idCauser": { "type": "integer", "description": "ID of the causer of the repair.", "format": "int64" }, "idReason": { "type": "integer", "description": "ID of the reason of the repair.", "format": "int64" }, "cause": { "type": "string", "description": "Cause of the repair.", "nullable": true }, "repairComment": { "type": "string", "description": "Comment of the repair.", "nullable": true }, "isFinished": { "type": "boolean", "description": "Repair can be registered in already finished state. Timestamps will be set accordingly." } }, "additionalProperties": false, "description": "Request to register new repair of the detail." }, "RepairFinishRequestDto": { "type": "object", "properties": { "idRepairs": { "type": "array", "items": { "type": "integer", "format": "int64" }, "description": "ID of the repairs to finish.", "nullable": true } }, "additionalProperties": false, "description": "Request to finish repairs." }, "RepairResponseDto": { "type": "object", "properties": { "idRepair": { "type": "integer", "description": "ID of the repair.", "format": "int64" }, "idWork": { "type": "integer", "description": "ID of the work associated with this repair.", "format": "int64" }, "idDetail": { "type": "integer", "description": "ID of the detail that was repaired.", "format": "int64" }, "idCauser": { "type": "integer", "description": "ID of the causer of the repair.", "format": "int64" }, "idReason": { "type": "integer", "description": "ID of the reason of the repair.", "format": "int64" }, "repairStartTime": { "type": "string", "description": "Start time of the repair.", "format": "date-time" }, "repairFinishTime": { "type": "string", "description": "Finish time of the repair.", "format": "date-time", "nullable": true }, "repairSpentTime": { "$ref": "#/components/schemas/TimeSpan" }, "cause": { "type": "string", "description": "Cause of the repair.", "nullable": true }, "repairComment": { "type": "string", "description": "Comment of the repair.", "nullable": true }, "repairStatusCode": { "type": "string", "description": "Machine-readable code of the current status of this repair.", "nullable": true } }, "additionalProperties": false, "description": "Element of the response: repair of the detail." }, "RepairWithReasonNameResponseDto": { "type": "object", "properties": { "idRepair": { "type": "integer", "description": "ID of the repair.", "format": "int64" }, "idWork": { "type": "integer", "description": "ID of the work associated with this repair.", "format": "int64" }, "idDetail": { "type": "integer", "description": "ID of the detail that was repaired.", "format": "int64" }, "idCauser": { "type": "integer", "description": "ID of the causer of the repair.", "format": "int64" }, "idReason": { "type": "integer", "description": "ID of the reason of the repair.", "format": "int64" }, "repairStartTime": { "type": "string", "description": "Start time of the repair.", "format": "date-time" }, "repairFinishTime": { "type": "string", "description": "Finish time of the repair.", "format": "date-time", "nullable": true }, "repairSpentTime": { "$ref": "#/components/schemas/TimeSpan" }, "cause": { "type": "string", "description": "Cause of the repair.", "nullable": true }, "repairComment": { "type": "string", "description": "Comment of the repair.", "nullable": true }, "idRepairStatus": { "type": "integer", "description": "ID of the current status of this repair.", "format": "int64" }, "reasonName": { "type": "string", "description": "Reason name of this repair.", "nullable": true } }, "additionalProperties": false, "description": "Element of the response: repair of the detail." }, "RoleResponseDto": { "type": "object", "properties": { "idRole": { "type": "integer", "description": "ID of the role.", "format": "int64" }, "roleCode": { "type": "string", "description": "Machine-readable code of the role.", "nullable": true }, "roleName": { "type": "string", "description": "Human-readable name of the role in preffered language.", "nullable": true }, "idActionSet": { "type": "integer", "description": "ID of role's action set.", "format": "int64" } }, "additionalProperties": false, "description": "Element of the response: user role in the application." }, "SimpleResponseDto": { "type": "object", "properties": { "message": { "type": "string", "description": "Message of the response.", "nullable": true } }, "additionalProperties": false, "description": "Simple response with message, when no special format required." }, "TimeSpan": { "type": "object", "properties": { "ticks": { "type": "integer", "format": "int64" }, "days": { "type": "integer", "format": "int32" }, "hours": { "type": "integer", "format": "int32" }, "milliseconds": { "type": "integer", "format": "int32" }, "minutes": { "type": "integer", "format": "int32" }, "seconds": { "type": "integer", "format": "int32" }, "totalDays": { "type": "number", "format": "double", "readOnly": true }, "totalHours": { "type": "number", "format": "double", "readOnly": true }, "totalMilliseconds": { "type": "number", "format": "double", "readOnly": true }, "totalMinutes": { "type": "number", "format": "double", "readOnly": true }, "totalSeconds": { "type": "number", "format": "double", "readOnly": true } }, "additionalProperties": false }, "UserCreateRequestDto": { "type": "object", "properties": { "firstName": { "type": "string", "description": "First name of the person.", "nullable": true }, "lastName": { "type": "string", "description": "Last name of the person.", "nullable": true }, "idWorkGroup": { "type": "integer", "description": "Binding of a user to a workgroup (not empty only for the team leader role).", "format": "int64", "nullable": true }, "login": { "type": "string", "description": "User's login (empty for operator).", "nullable": true }, "password": { "type": "array", "items": { "type": "string" }, "description": "User's password (empty for operator).", "nullable": true }, "userBarcode": { "type": "string", "description": "Text field containing transcript of barcode from employee badge (not empty only for operator).", "nullable": true }, "idRole": { "type": "integer", "description": "ID of the current role of the user.", "format": "int64", "nullable": true }, "idFactory": { "type": "integer", "description": "ID of the current factory of the user.", "format": "int64", "nullable": true }, "userActive": { "type": "boolean", "description": "If user is active." } }, "additionalProperties": false, "description": "Request to create new user." }, "UserResponseDto": { "type": "object", "properties": { "idUser": { "type": "integer", "description": "ID of the user.", "format": "int64" }, "firstName": { "type": "string", "description": "First name of the person.", "nullable": true }, "lastName": { "type": "string", "description": "Last name of the person.", "nullable": true }, "idWorkGroup": { "type": "integer", "description": "Binding of a user to a workgroup (not empty only for the team leader role).", "format": "int64", "nullable": true }, "login": { "type": "string", "description": "User's login (empty for operator).", "nullable": true }, "userBarcode": { "type": "string", "description": "Text field containing transcript of barcode from employee badge (not empty only for operator).", "nullable": true }, "idRole": { "type": "integer", "description": "Current role of the user.", "format": "int64", "nullable": true }, "userActive": { "type": "boolean", "description": "If user is active." } }, "additionalProperties": false, "description": "Element of the response with users." }, "UserUpdateRequestDto": { "type": "object", "properties": { "firstName": { "type": "string", "description": "First name of the person.", "nullable": true }, "lastName": { "type": "string", "description": "Last name of the person.", "nullable": true }, "idWorkGroup": { "type": "integer", "description": "Binding of a user to a workgroup (not empty only for the team leader role).", "format": "int64", "nullable": true }, "login": { "type": "string", "description": "User's login (empty for operator).", "nullable": true }, "password": { "type": "array", "items": { "type": "string" }, "description": "User's password (empty for operator).", "nullable": true }, "userBarcode": { "type": "string", "description": "Text field containing transcript of barcode from employee badge (not empty only for operator).", "nullable": true }, "idRole": { "type": "integer", "description": "ID of the current role of the user.", "format": "int64", "nullable": true }, "idFactory": { "type": "integer", "description": "ID of the current factory of the user.", "format": "int64", "nullable": true }, "userActive": { "type": "boolean", "description": "If user is active." } }, "additionalProperties": false, "description": "Request to update existing user." }, "WorkFinishRequestDto": { "type": "object", "properties": { "accomplishedChecks": { "type": "array", "items": { "type": "integer", "format": "int64" }, "description": "Position numbers in check list to set corresponding check times.", "nullable": true }, "detailNewLocationBarcode": { "type": "string", "description": "Optional barcode of the location to place detail after work is stopped (if put on cart is true).", "nullable": true } }, "additionalProperties": false, "description": "Request to finish the work." }, "WorkgroupCreateRequestDto": { "type": "object", "properties": { "workgroupName": { "type": "string", "description": "Name of the workgroup.", "nullable": true }, "workgroupActive": { "type": "boolean", "description": "Flag that signifies whether this workgroup is active." } }, "additionalProperties": false, "description": "Request to register new workgroup." }, "WorkgroupResponseDto": { "type": "object", "properties": { "idWorkgroup": { "type": "integer", "description": "Synthetic ID.", "format": "int64" }, "workgroupName": { "type": "string", "description": "Name of the workgroup.", "nullable": true }, "workgroupActive": { "type": "boolean", "description": "Flag that signifies whether this workgroup is active." } }, "additionalProperties": false, "description": "Element of the response: workgroup." }, "WorkgroupSummaryResponseDto": { "type": "object", "properties": { "idWorkgroup": { "type": "integer", "description": "Synthetic ID.", "format": "int64" }, "workgroupName": { "type": "string", "description": "Name of the workgroup.", "nullable": true }, "workgroupActive": { "type": "boolean", "description": "Flag that signifies whether this workgroup is active." }, "idFactory": { "type": "integer", "description": "Factory where this workgroup operates.", "format": "int64" }, "idFactoryName": { "type": "integer", "description": "Name of the factory where this workgroup operates.", "format": "int64" }, "idProductionType": { "type": "integer", "description": "Production type with which this workgroup operates.", "format": "int64" }, "teamLeadersCount": { "type": "integer", "description": "Count of the team leaders of this workgroup.", "format": "int32" }, "workplacesCount": { "type": "integer", "description": "Count of the workplaces of this workgroup.", "format": "int32" }, "idTeamLeaders": { "type": "array", "items": { "type": "integer", "format": "int64" }, "description": "IDs of the team leaders of this workgroup.", "nullable": true }, "idWorkplaces": { "type": "array", "items": { "type": "integer", "format": "int64" }, "description": "IDs of the workplaces of this workgroup.", "nullable": true } }, "additionalProperties": false, "description": "Element of the response: workgroup summary." }, "WorkgroupUpdateRequestDto": { "type": "object", "properties": { "workgroupName": { "type": "string", "description": "Name of the workgroup.", "nullable": true }, "workgroupActive": { "type": "boolean", "description": "Flag that signifies whether this workgroup is active." } }, "additionalProperties": false, "description": "Request to update existing workgroup." }, "WorkplaceCreateRequestDto": { "type": "object", "properties": { "workplaceName": { "type": "string", "description": "Name of the workplace.", "nullable": true }, "putOnCart": { "type": "boolean", "description": "Flag that signifies whether detail should be placed on cart when work with it is finished." }, "idCheckList": { "type": "integer", "description": "ID of checklist to perform after work is.", "format": "int64", "nullable": true }, "workplaceBarcode": { "type": "string", "description": "Barcode that identifies workplace.", "nullable": true }, "numberOfElements": { "type": "integer", "description": "How many elements can operator work with at the same time.", "format": "int32" }, "analyticNumber": { "type": "string", "description": "Analytic number.", "nullable": true }, "toestandNumber": { "type": "string", "description": "Code of the state.", "nullable": true }, "workplaceActive": { "type": "boolean", "description": "If workplace is available for work." }, "idFactory": { "type": "integer", "description": "ID of the factory where this workplace is located.", "format": "int64" } }, "additionalProperties": false, "description": "Request to create workplace." }, "WorkplaceResponseDto": { "type": "object", "properties": { "idWorkplace": { "type": "integer", "format": "int64" }, "workplaceName": { "type": "string", "nullable": true }, "putOnCart": { "type": "boolean" }, "idChecklist": { "type": "integer", "format": "int64", "nullable": true }, "workplaceBarcode": { "type": "string", "nullable": true }, "numberOfElements": { "type": "integer", "format": "int32" }, "analyticNumber": { "type": "string", "nullable": true }, "toestandNumber": { "type": "string", "nullable": true }, "workplaceActive": { "type": "boolean" }, "idFactory": { "type": "integer", "format": "int64" } }, "additionalProperties": false, "description": "Element of the response: workplace." }, "WorkplaceScanRequestDto": { "type": "object", "properties": { "workplaceBarcode": { "type": "string", "description": "Scanned workplace barcode.", "nullable": true } }, "additionalProperties": false, "description": "Request with scanned workplace barcode to start work on this workplace." }, "WorkplaceScanResponseDto": { "type": "object", "properties": { "idWorkplace": { "type": "integer", "description": "ID of the workplace.", "format": "int64" }, "workplaceBarcode": { "type": "string", "description": "Barcode of the workplace.", "nullable": true }, "workplaceName": { "type": "string", "description": "Name of the workplace.", "nullable": true }, "putOnCart": { "type": "boolean", "description": "Flag whether detail should be put on cart after work with it is finished." }, "numberOfElements": { "type": "integer", "description": "Number of elements that can be processed simultaneously on this workplace.", "format": "int32" }, "idFactory": { "type": "integer", "description": "ID of the factory where this workplace is located.", "format": "int64" } }, "additionalProperties": false, "description": "Response with workplace data on successful scan of the workplace barcode." }, "WorkplaceUpdateRequestDto": { "type": "object", "properties": { "workplaceName": { "type": "string", "description": "Name of the workplace.", "nullable": true }, "putOnCart": { "type": "boolean", "description": "Flag that signifies whether detail should be placed on cart when work with it is finished." }, "idCheckList": { "type": "integer", "description": "ID of checklist to perform after work is.", "format": "int64", "nullable": true }, "workplaceBarcode": { "type": "string", "description": "Barcode that identifies workplace.", "nullable": true }, "numberOfElements": { "type": "integer", "description": "How many elements can operator work with at the same time.", "format": "int32" }, "analyticNumber": { "type": "string", "description": "Analytic number.", "nullable": true }, "toestandNumber": { "type": "string", "description": "Code of the state.", "nullable": true }, "workplaceActive": { "type": "boolean", "description": "If workplace is available for work." }, "idFactory": { "type": "integer", "description": "ID of the factory where this workplace is located.", "format": "int64" } }, "additionalProperties": false, "description": "Request to create workplace." }, "WorkResponseDto": { "type": "object", "properties": { "idWork": { "type": "integer", "description": "ID of the work.", "format": "int64" }, "workStartTime": { "type": "string", "description": "Timestamp when work was started.", "format": "date-time" }, "workStopTime": { "type": "string", "description": "Timestamp when work was stopped.", "format": "date-time", "nullable": true }, "workFinishTime": { "type": "string", "description": "Timestamp when work was finished.", "format": "date-time", "nullable": true }, "idWorkplace": { "type": "integer", "description": "ID of the workplace.", "format": "int64" }, "idDetail": { "type": "integer", "description": "ID of the detail.", "format": "int64" }, "idCheckList": { "type": "integer", "description": "ID of the check list.", "format": "int64" }, "check1Time": { "type": "string", "description": "Date and time (timestamp with timezone) when first check of the checklist was performed.", "format": "date-time", "nullable": true }, "check2Time": { "type": "string", "description": "Date and time (timestamp with timezone) when second check of the checklist was performed.", "format": "date-time", "nullable": true }, "check3Time": { "type": "string", "description": "Date and time (timestamp with timezone) when third check of the checklist was performed.", "format": "date-time", "nullable": true }, "check4Time": { "type": "string", "description": "Date and time (timestamp with timezone) when fourth check of the checklist was performed.", "format": "date-time", "nullable": true } }, "additionalProperties": false, "description": "Element of the response - work with the detail." }, "WorkStopRequestDto": { "type": "object", "properties": { "accomplishedChecks": { "type": "array", "items": { "type": "integer", "format": "int64" }, "description": "Position numbers in check list to set corresponding check times.", "nullable": true }, "detailNewLocationBarcode": { "type": "string", "description": "Optional barcode of the location to place detail after work is stopped (if put on cart is true).", "nullable": true } }, "additionalProperties": false, "description": "Request to stop the work." } } }, "tags": [ { "name": "Action", "description": "Controller implementing action-related API endpoints." }, { "name": "Causer", "description": "Controller implementing causer-related API endpoints." }, { "name": "Check", "description": "Controller implementing check-related endpoints." }, { "name": "CheckList", "description": "Controller implementing check list-related API endpoints." }, { "name": "ConnectionReasonAction", "description": "Controller implementing endpoints related to connection between reasons and actions." }, { "name": "ConnectionWorkplaceAction", "description": "Controller implementing endpoints related to connection between workplaces and actions." }, { "name": "ControlPlan", "description": "Controller implementing control plan-real" }, { "name": "Detail", "description": "Controller implementing detail-related API endpoints." }, { "name": "Factory", "description": "Controller implementing factory-related API endpoints." }, { "name": "Import", "description": "Controller for imports from *.xlsx files." }, { "name": "Login", "description": "Controller implementing login- and logout-related API endpoints." }, { "name": "ProductionType", "description": "Controller implementing production type-related API endpoints." }, { "name": "Reason", "description": "Controller implementing reason-related API endpoints." }, { "name": "ReasonDetail", "description": "Controller implementing reason detail-related API endpoints." }, { "name": "Repair", "description": "Controller implementing repair-related API endpoints." }, { "name": "Role", "description": "Controller implementing role-related endpoints." }, { "name": "User", "description": "Controller implementing user-related functionality." }, { "name": "Work", "description": "Controller implementing work-related API endpoints." }, { "name": "Workgroup", "description": "Controller implementing workgroup-related API endpoints." }, { "name": "Workplace", "description": "Controller implementing workplace-related API endpoints." } ] }